#ifndef NGLSCENE_H_
#define NGLSCENE_H_
#include <ngl/BBox.h>
#include "Ball.h"
#include "Paddle.h"
#include <ngl/Camera.h>
#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/Text.h>
#include "WindowParams.h"
#include <QOpenGLWindow>
#include <QSet>
#include <memory>
#include <QTime>
//----------------------------------------------------------------------------------------------------------------------
/// @file NGLScene.h
/// @brief this class inherits from the Qt OpenGLWindow and allows us to use NGL to draw OpenGL
/// @author Jonathan Macey
/// @version 1.0
/// @date 10/9/13
/// Revision History :
/// This is an initial version used for the new NGL6 / Qt 5 demos
/// @class NGLScene
/// @brief our main glwindow widget for NGL applications all drawing elements are
/// put in this file
//----------------------------------------------------------------------------------------------------------------------

class NGLScene : public QOpenGLWindow
{
  public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor for our NGL drawing class
    /// @param [in] parent the parent window to the class
    //----------------------------------------------------------------------------------------------------------------------
    NGLScene();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor must close down ngl and release OpenGL resources
    //----------------------------------------------------------------------------------------------------------------------
    ~NGLScene();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the initialize class is called once when the window is created and we have a valid GL context
    /// use this to setup any default GL stuff
    //----------------------------------------------------------------------------------------------------------------------
    void initializeGL();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called everytime we want to draw the scene
    //----------------------------------------------------------------------------------------------------------------------
    void paintGL();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called everytime we resize
    //----------------------------------------------------------------------------------------------------------------------
    void resizeGL(int _w, int _h);

private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the windows params such as mouse and rotations etc
    //----------------------------------------------------------------------------------------------------------------------
    WinParams m_win;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the global mouse transforms
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_mouseGlobalTX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Camera
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Camera m_cam;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the model position for mouse movement
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_modelPos;



    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a timer triggered by the startTimer call in the ctor this is called
    /// to update the paddle position based on the key presses
    //----------------------------------------------------------------------------------------------------------------------
    int m_updatePaddleTimer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief timer to change the ball position by calling update()
    //----------------------------------------------------------------------------------------------------------------------
    int m_ballUpdateTimer;
    /// @brief flag to indicate if animation is active or not
    //----------------------------------------------------------------------------------------------------------------------
    bool m_animate;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief we will draw with a different timer to the update
    //----------------------------------------------------------------------------------------------------------------------
    int m_redrawTimer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a pointer to our paddle
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<Paddle> m_paddle;
    /// @brief a pointer to our second paddle
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<Paddle> m_paddle2;

    /// @brief a pointer to our ball
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<Ball> m_ball;

    /// @brief a pointer to our plane
    //----------------------------------------------------------------------------------------------------------------------
    //std::unique_ptr<Plane> m_plane;

    /// @brief the bounding box to contain the spheres
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<ngl::BBox> m_bbox;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the keys being pressed
    //----------------------------------------------------------------------------------------------------------------------
    QSet<Qt::Key> m_keysPressed;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to show bounding sphere
    //----------------------------------------------------------------------------------------------------------------------
    bool m_showBSphere;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to load transform matrices to the shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader();
     //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse is moved
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent (QMouseEvent * _event );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is pressed
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent ( QMouseEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is released
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseReleaseEvent ( QMouseEvent *_event );

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse wheel is moved
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void wheelEvent( QWheelEvent *_event);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief processKeyDown passed from the main window class
    /// @param *_event a pointer to the QKeyEvent passed from main window
    /// class
    //----------------------------------------------------------------------------------------------------------------------
    void keyPressEvent(QKeyEvent *_event );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief processKeyUp passed from the main window class
    /// @param *_event a pointer to the QKeyEvent passed from main window
    /// class
    //----------------------------------------------------------------------------------------------------------------------
    void keyReleaseEvent(QKeyEvent *_event );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief called when the timer triggers used to update and draw
    /// @param *_event a pointer to the timer event id
    //----------------------------------------------------------------------------------------------------------------------
    void timerEvent( QTimerEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our font / text
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<ngl::Text> m_text;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief check the collisions
    //----------------------------------------------------------------------------------------------------------------------
    void checkCollisions();
    /// @brief do the actual sphereSphere collisions
    /// @param[in] _pos1 the position of the first sphere
    ///	@param[in] _radius1 the radius of the first sphere
    /// @param[in] _pos2 the position of the second sphere
    ///	@param[in] _radius2 the radius of the second sphere
    //----------------------------------------------------------------------------------------------------------------------
    bool sphereSphereCollision( ngl::Vec3 _pos1, GLfloat _radius1, ngl::Vec3 _pos2, GLfloat _radius2 );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief check the bounding box collisions
    //----------------------------------------------------------------------------------------------------------------------
    void BBoxCollision();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief load the texture and store the id in m_textureName
    //----------------------------------------------------------------------------------------------------------------------
    void loadTexture();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief opengl texture id for the crate texture
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_textureName;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Set all positions of the paddle and ball back to zero
    //----------------------------------------------------------------------------------------------------------------------
    void reset();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief GUI of the game
    //----------------------------------------------------------------------------------------------------------------------
    void GUI();


    ngl::Transformation m_transform;
    ngl::Mat4 m_view;
    ngl::Mat4 m_project;
    void movePaddle();
    void movePaddle2();
    void moveBall();
    QTime m_currentTime;


};



#endif
